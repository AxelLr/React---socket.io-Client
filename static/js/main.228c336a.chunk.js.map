{"version":3,"sources":["context/Types.js","context/Reducer.js","context/Context.js","components/chat/messages/message/Message.js","components/chat/messages/Messages.js","components/chat/sendmessage/SendMessage.js","components/chat/connecteduser/UserConnected.js","components/connectedUsers/ConnectedUsers.js","components/chat/Chat.js","pages/login/Login.js","components/privatechats/privatechat/privatemessage/PrivateMessage.js","components/privatechats/privatechat/sendprivatemessage/SendPrivateMessage.js","components/privatechats/privatechat/PrivateChat.js","components/privatechats/PrivateChats.js","pages/layout/Layout.js","pages/homepage/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["SET_USER_CONNECTED","SET_USER_SOCKET","PUSH_NEW_MESSAGE","CONNECTED_USERS","ADMIN_MESSAGES","USER_DISCONNECTED","NEW_PRIVATE_CHAT","PUSH_NEW_PRIVATE_MESSAGE","SET_NOTIFICATIONS_AS_READED","CLOSE_CHAT","Reducer","state","action","type","userConnected","payload","userConnectedSocket","chatGeneral","connectedUsers","privateChats","privateMessages","id","findUser","find","item","filter","chat","i","length","readed","sender","Context","React","createContext","initialState","Message","props","useContext","State","message","user","createdAt","console","log","isSentByCurrentUser","className","Moment","startOf","format","ReactEmoji","emojify","Messages","context","Dispatch","useEffect","on","map","uid","key","SendMessage","useState","setMessage","onSubmit","e","preventDefault","emit","maxLength","placeholder","onChange","target","value","style","color","background","fontSize","UserConnected","title","placement","IconButton","onClick","off","history","push","margin","ConnectedUsers","notifications","usuariosConectados","messages","openPrivateChat","marginTop","Chat","newUser","users","data","receiver","idSender","idReceiver","ENDPOINT","Login","username","setUsername","errors","setErrors","isDisabled","setDisabled","socketio","io","initSocket","setUser","isUser","minLength","required","disabled","CircularProgress","size","PrivateMessage","SendPrivateMessage","PrivateChat","PrivateChats","Layout","Homepage","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","useReducer","dispatch","Provider","children","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.228c336a.chunk.js","sourcesContent":["export const SET_USER_CONNECTED = 'SET_USER_CONNECTED'\r\nexport const SET_USER_SOCKET = 'SET_USER_SOCKET'\r\nexport const PUSH_NEW_MESSAGE = 'PUSH_NEW_MESSAGE'\r\nexport const CONNECTED_USERS = 'CONNECTED_USERS'\r\nexport const ADMIN_MESSAGES = 'ADMIN_MESSAGES'\r\nexport const USER_DISCONNECTED = 'USER_DISCONNECTED'\r\nexport const NEW_PRIVATE_CHAT = 'NEW_PRIVATE_CHAT'\r\nexport const PUSH_NEW_PRIVATE_MESSAGE = 'PUSH_NEW_PRIVATE_MESSAGE'\r\nexport const SET_NOTIFICATIONS_AS_READED = 'SET_NOTIFICATIONS_AS_READED'\r\nexport const CLOSE_CHAT = 'CLOSE_CHAT'","import { SET_USER_CONNECTED, SET_USER_SOCKET, \r\n    PUSH_NEW_MESSAGE, CONNECTED_USERS, SET_NOTIFICATIONS_AS_READED,\r\n     ADMIN_MESSAGES, USER_DISCONNECTED, NEW_PRIVATE_CHAT, PUSH_NEW_PRIVATE_MESSAGE, CLOSE_CHAT } from './Types'\r\n\r\nfunction Reducer (state, action) {\r\n    switch(action.type) {\r\n        case SET_USER_CONNECTED:\r\n            return {\r\n                ...state,\r\n                userConnected: action.payload,\r\n        } \r\n        case SET_USER_SOCKET:\r\n            return {\r\n                ...state,\r\n                userConnectedSocket: action.payload \r\n        }\r\n        case PUSH_NEW_MESSAGE:\r\n            return {\r\n                ...state,\r\n                chatGeneral: [ ...state.chatGeneral, \r\n                action.payload\r\n            ]\r\n        }\r\n        case CONNECTED_USERS:\r\n            return {\r\n                ...state,\r\n                connectedUsers: [ ...action.payload\r\n            ]\r\n        }\r\n        case ADMIN_MESSAGES:\r\n            return {\r\n                ...state,\r\n                chatGeneral: [ ...state.chatGeneral,\r\n                    action.payload\r\n            ]\r\n        }\r\n        case USER_DISCONNECTED:\r\n            return {\r\n                ...state,\r\n                userConnected: '',\r\n                chatGeneral: [],\r\n                userConnectedSocket: {},\r\n                privateChats: [],\r\n                privateMessages: []\r\n            }\r\n        case NEW_PRIVATE_CHAT: {\r\n           const { id } = action.payload\r\n           const findUser = state.privateChats.find(item => item.id === id) \r\n           if(!findUser) {\r\n            state.privateChats = [ ...state.privateChats, action.payload] \r\n          \r\n           } else {\r\n            state.privateChats =  state.privateChats.filter(chat => chat.id !== id)\r\n           }\r\n           return {\r\n               ...state\r\n           }}\r\n        case PUSH_NEW_PRIVATE_MESSAGE: {\r\n           \r\n            return {\r\n                ...state,\r\n                privateMessages : [ ...state.privateMessages, action.payload ]\r\n            }}\r\n         case SET_NOTIFICATIONS_AS_READED: {\r\n\r\n            for( let i = 0; i < state.privateMessages.length; i++) {\r\n\r\n                    if( state.privateMessages[i].readed === false && state.privateMessages[i].sender === action.payload ) {\r\n                        state.privateMessages[i].readed = true\r\n                    }\r\n            }\r\n             return {\r\n                 ...state,\r\n             } }\r\n         case CLOSE_CHAT:\r\n         const { id } = action.payload\r\n         state.privateChats = state.privateChats.filter(chat => chat.id !== id)\r\n         return {\r\n            ...state,\r\n        }\r\n      default: return state\r\n    }\r\n  }\r\n\r\nexport default Reducer ","import React,{ useReducer } from 'react'\r\nimport Reducer from './Reducer'\r\n\r\nexport const Context = React.createContext()\r\n\r\nconst initialState = {\r\n  userConnected: '',\r\n  userConnectedSocket: {},\r\n  connectedUsers: [],\r\n  chatGeneral: [],\r\n  privateChats: [],\r\n  privateMessages: []\r\n}\r\n\r\nexport function State (props) {\r\n                                         \r\n    const [state, dispatch] = useReducer(Reducer, initialState)\r\n\r\n    return (\r\n        <Context.Provider value= {{ State: state, Dispatch: dispatch }} >\r\n            {props.children}\r\n        </Context.Provider>\r\n    )\r\n}\r\n\r\n","import React,{ useContext } from 'react'\r\nimport { Context } from '../../../../context/Context'\r\nimport ReactEmoji from 'react-emoji'\r\nimport Moment from 'moment'\r\n\r\nconst Message = (props) => {\r\n\r\n const context = useContext(Context)\r\n\r\n const { userConnected } = context.State\r\n\r\n const { user, message, createdAt } = props.message\r\n\r\n const { sender } = props.message\r\n\r\n console.log(props.message)\r\n\r\n  let isSentByCurrentUser = false;\r\n\r\n  if(user === userConnected || sender === userConnected ) {\r\n    isSentByCurrentUser = true\r\n  } \r\n\r\n  return (\r\n    isSentByCurrentUser\r\n    ? (\r\n      <div className='message-content' >\r\n        \r\n        <div className='moment-container' >\r\n          <span> { Moment(createdAt).startOf('second').format('LT') } </span> \r\n        </div>\r\n       <div> \r\n        <p >{ReactEmoji.emojify(message)}</p>\r\n        </div>\r\n    \r\n      </div>\r\n      )\r\n      : (\r\n        <div className='message-content-u' >\r\n          <div className='user-moment-container' >\r\n             <p className=\"user-name\" >{user}</p>\r\n            <span> { Moment(createdAt).startOf('second').format('LT') } </span>\r\n          </div>\r\n          <div>\r\n             <p >{ReactEmoji.emojify(message)}</p>\r\n          </div>\r\n        </div>\r\n      )\r\n  );\r\n}\r\n\r\nexport default Message;","import React,{ useContext, useEffect } from 'react'\r\nimport ScrollToBottom from 'react-scroll-to-bottom'\r\nimport { PUSH_NEW_MESSAGE } from '../../../context/Types' \r\n// CONTEXT\r\nimport { Context } from '../../../context/Context'\r\nimport Message from './message/Message'\r\n\r\nexport default function Messages() {\r\n\r\n  const context = useContext(Context)\r\n  const { userConnectedSocket, chatGeneral } = context.State\r\n  const { Dispatch } = context\r\n \r\n  useEffect(() => {\r\n    userConnectedSocket.on('NEW_MESSAGE', ( {user, message, createdAt} ) => {\r\n     \r\n     Dispatch({ type: PUSH_NEW_MESSAGE, payload: {user, message, createdAt} })\r\n    });\r\n\r\n  }, [userConnectedSocket, Dispatch])\r\n\r\n    return (\r\n        <ScrollToBottom className='messages-container' >     \r\n\r\n            {chatGeneral.map( (message, uid) => {\r\n              if(typeof(message) === 'string' ) {\r\n                return <p key={uid}> {message} </p>\r\n              } else { return < Message key={uid} message={message}   /> } } ) }\r\n  \r\n        </ ScrollToBottom >\r\n    )\r\n}\r\n","import React,{ useState, useContext } from 'react'\r\nimport { Context } from '../../../context/Context'\r\nimport Send from '@material-ui/icons/Send'\r\n\r\nexport default function SendMessage() {\r\n\r\nconst context = useContext(Context)\r\n\r\nconst { userConnectedSocket, userConnected } = context.State\r\n\r\nconst [message, setMessage] = useState('')\r\n  \r\nconst handleSubmit = (e) => {\r\n    e.preventDefault()\r\n\r\n    if(message) {\r\n        userConnectedSocket.emit('SEND_MESSAGE', { userConnected, message }, () => setMessage(''));\r\n    }\r\n}\r\n    return (\r\n        <div className='sendMessage-container'>\r\n\r\n            <form onSubmit={handleSubmit} > \r\n                <input maxLength='250' type='text' placeholder='Escribe un mensaje...' onChange={(e) => setMessage(e.target.value)} value={message}  /> \r\n                <button type='submit'> < Send style={{color: '#007AFE', background: 'transparent', fontSize: 45 }} /> </button>\r\n            </form>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React,{ useContext } from 'react'\r\nimport { Context } from '../../../context/Context'\r\nimport { USER_DISCONNECTED } from '../../../context/Types'\r\nimport WifiOff from '@material-ui/icons/WifiOff'\r\nimport ToolTip from '@material-ui/core/Tooltip'\r\nimport IconButton from '@material-ui/core/IconButton'\r\n\r\nexport default function UserConnected(props) {\r\n\r\nconst context = useContext(Context)\r\nconst { userConnected, userConnectedSocket } = context.State\r\n\r\n    \r\nconst logOut =  () => {\r\n    userConnectedSocket.off()\r\n    context.Dispatch({type: USER_DISCONNECTED})\r\n    props.history.push('/Community')\r\n}\r\n    return (\r\n        <div className='user-connected-container'>\r\n            <h2>{userConnected}</h2>\r\n            <ToolTip title=\"Desconectarse\" placement=\"left\" > \r\n                <IconButton onClick={logOut}>  \r\n                     < WifiOff style={{color: '#800000', margin: 5}} />  \r\n                </IconButton> \r\n             </ToolTip>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { Context } from '../../context/Context'\r\nimport { NEW_PRIVATE_CHAT } from '../../context/Types'\r\nimport People from '@material-ui/icons/People'\r\n\r\nexport default function ConnectedUsers() {\r\n\r\n    const context = useContext(Context)\r\n    const { connectedUsers, userConnected, privateMessages } = context.State\r\n\r\n    let notifications = '';\r\n\r\n    const openPrivateChat = (user, id) => {\r\n    if(userConnected !== user) {\r\n    context.Dispatch({type: NEW_PRIVATE_CHAT, payload: { user, id } })\r\n    }\r\n    }\r\n\r\n  let usuariosConectados = connectedUsers.filter(user => user.user !== userConnected ).map(\r\n        (user, uid) => { \r\n\r\n            const messages = privateMessages && privateMessages.filter(message => message.sender === user.user && message.readed === false)\r\n            notifications =  messages ? messages.length : '';\r\n\r\n       return ( <p onClick={ ()=> openPrivateChat(user.user, user.id)} key={uid}> \r\n  <span> {user.user} </span > { notifications !== 0 && <span className='notifications'> {notifications} </span> }  </p>\r\n   ) \r\n})\r\n\r\n    return (\r\n        <div className='connected-users-container'>\r\n            <h2> < People style={{marginTop: 8, fontSize: 70}} /> </h2>\r\n             { usuariosConectados }\r\n        </div>\r\n    )\r\n}\r\n","import React,{ useContext, useEffect } from 'react'\r\nimport Messages from './messages/Messages'\r\nimport SendMessage from './sendmessage/SendMessage'\r\nimport UserConnected from './connecteduser/UserConnected'\r\nimport ConnectedUsers from '../connectedUsers/ConnectedUsers'\r\nimport { Context } from '../../context/Context'\r\nimport { CONNECTED_USERS, ADMIN_MESSAGES, USER_DISCONNECTED, PUSH_NEW_PRIVATE_MESSAGE} from '../../context/Types'\r\n\r\nexport default function Chat(props) {\r\n    \r\n  const context = useContext(Context)\r\n  const { userConnected, userConnectedSocket } = context.State\r\n  const { Dispatch } = context\r\n\r\n     useEffect(() => {\r\n\r\n         const newUser = {\r\n           user: userConnected,\r\n           id: userConnectedSocket.id\r\n         }\r\n  \r\n          userConnectedSocket.emit('join', newUser)\r\n          return () => {\r\n           userConnectedSocket.emit('USER_LEAVE')\r\n           Dispatch({ type: USER_DISCONNECTED})\r\n           userConnectedSocket.off()\r\n         };\r\n        }, [userConnectedSocket, userConnected, Dispatch ])\r\n\r\n        useEffect(() => {\r\n            userConnectedSocket.on('CONNECTED_USERS', (users) => {\r\n               \r\n              Dispatch({type: CONNECTED_USERS, payload: users});\r\n                });\r\n            \r\n               userConnectedSocket.on('NEW_USER', (data) => {\r\n                    \r\n                 Dispatch({type: ADMIN_MESSAGES, payload: data});\r\n                 })\r\n            \r\n                 userConnectedSocket.on('WELCOME', (data) => {\r\n                  Dispatch({type: ADMIN_MESSAGES, payload: data});\r\n                 })\r\n            \r\n                 userConnectedSocket.on('USER_DISCONNECTED', (data) => {\r\n                  Dispatch({type: ADMIN_MESSAGES, payload: data});\r\n                 }) \r\n\r\n                 userConnectedSocket.on('NEW_PRIVATE_MESSAGE', ( { sender, receiver, idSender, idReceiver,  message, createdAt, readed } ) => {\r\n              \r\n                Dispatch({ type: PUSH_NEW_PRIVATE_MESSAGE, payload: { sender, receiver, idSender, idReceiver,  message, createdAt, readed } })\r\n              });\r\n           }, [userConnectedSocket, Dispatch ])\r\n\r\n    return (\r\n        <div className='chat-container'> \r\n\r\n            <div className='chat-userlist-container'>\r\n                < ConnectedUsers />\r\n            </div>\r\n\r\n                <div className='chat-title-container'>\r\n                     < UserConnected history={props.history} />\r\n                </div>\r\n                \r\n                < Messages />\r\n\r\n                <div className='send-message-container'>\r\n                < SendMessage />\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n","import React,{ useState, useContext, useEffect } from 'react'\r\nimport io from 'socket.io-client'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\n// CONTEXT\r\nimport { Context } from '../../context/Context'\r\n// TYPES\r\nimport { SET_USER_CONNECTED, SET_USER_SOCKET } from '../../context/Types'\r\n\r\n const ENDPOINT = \"https://reactchatapp120.herokuapp.com/\"\r\n\r\nfunction Login() {\r\n\r\nconst context = useContext(Context)\r\nconst {  userConnectedSocket } = context.State\r\nconst { Dispatch } = context\r\n\r\nconst [ username, setUsername ] = useState('')\r\nconst [errors, setErrors] = useState('')\r\nconst [isDisabled, setDisabled] = useState(false)\r\n\r\nuseEffect(() => {\r\n\r\n  const initSocket = () => {\r\n      \r\n      const socketio = io(ENDPOINT)\r\n\r\n      socketio.on('connection', () => { console.log('connected') })\r\n\r\n      Dispatch({type: SET_USER_SOCKET, payload: socketio})\r\n  }  \r\ninitSocket()\r\n}, [Dispatch])\r\n\r\nconst handleChange = (e) => {\r\n    setUsername(e.target.value)\r\n   \r\n} \r\n    \r\nconst handleSubmit = (e) => {\r\n    setDisabled(true)\r\n    e.preventDefault();\r\n    userConnectedSocket.emit('VERIFY_USER', username, setUser )\r\n}\r\n\r\nconst setUser = ( { isUser } ) => {\r\n   \r\n    if(isUser) {\r\n        setErrors(\"Lo sentimos, el nombre ya ha sido tomado. Por favor, intenta con otro\")\r\n        setDisabled(false)\r\n    } else {\r\n        setErrors('')\r\n        setDisabled(false)\r\n        context.Dispatch({type: SET_USER_CONNECTED, payload: username })\r\n    }\r\n}\r\n    return (\r\n        <div className='login-container'>\r\n           \r\n           <div>\r\n           <h3>Debes conectarte para poder Ingresar a la sala</h3>\r\n                <form onSubmit={handleSubmit} > \r\n                <input minLength='4' maxLength='15' required  type='text' placeholder='Ingresa tu nombre...' onChange={handleChange} value={username}  /> \r\n                { errors && <p> {errors} </p> }\r\n                <button disabled={isDisabled} type='submit'> <span >Ingresar </span> <span>{isDisabled &&  < CircularProgress style={{background: 'transparent', margin: 5}} size={20} /> }</span> </button>\r\n                </form>\r\n            </div> \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","import React,{ useContext } from 'react'\r\nimport ScrollToBottom from 'react-scroll-to-bottom' \r\n// CONTEXT\r\nimport { Context } from '../../../../context/Context'\r\nimport Message from '../../../chat/messages/message/Message'\r\n\r\nexport default function PrivateMessage(props) {\r\n\r\n  const context = useContext(Context)\r\n  const { privateMessages } = context.State\r\n  const { id } = props\r\n\r\n    return (\r\n        <ScrollToBottom className='messages-container' >\r\n              { privateMessages.filter(chat => chat.idReceiver === id || chat.idSender === id ).map((chat, uid) => < Message key={uid} message={chat} />  ) }\r\n        </ ScrollToBottom >\r\n    )\r\n}\r\n","import React,{ useState, useContext } from 'react'\r\nimport { Context } from '../../../../context/Context'\r\nimport Send from '@material-ui/icons/Send'\r\n\r\nexport default function SendPrivateMessage(props) {\r\n\r\n    const { user, id } = props\r\n\r\n    const context = useContext(Context)\r\n\r\n    const { userConnectedSocket, userConnected } = context.State\r\n    \r\n    const [message, setMessage] = useState('')\r\n  \r\n    const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n\r\n    if(message) {\r\n        userConnectedSocket.emit('SEND_PRIVATE_MESSAGE', { user, message, id, userConnected }, () => setMessage(''));\r\n    }\r\n}\r\n    return (\r\n        <div>\r\n            <div className='sendMessage-container'>\r\n                <form onSubmit={handleSubmit} > \r\n                    <input maxLength='250' type='text' placeholder='Escribe un mensaje...' onChange={(e) => setMessage(e.target.value)} value={message}  /> \r\n                    <button type='submit'> < Send style={{color: '#007AFE', background: 'transparent', fontSize: 45 }} /> </button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React,{ useEffect, useContext } from 'react'\r\nimport PrivateMessage from './privatemessage/PrivateMessage'\r\nimport SendPrivateMessage from './sendprivatemessage/SendPrivateMessage'\r\nimport { Context } from '../../../context/Context'\r\nimport { SET_NOTIFICATIONS_AS_READED, CLOSE_CHAT} from '../../../context/Types'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\n\r\n\r\nexport default function PrivateChat(props) {\r\n\r\n    const context = useContext(Context)\r\n    const { Dispatch } = context\r\n    const { privateMessages } = context.State\r\n\r\n    const { user, id } = props.chat\r\n    useEffect(() => {\r\n\r\n        const { user } = props.chat\r\n\r\n        Dispatch({type: SET_NOTIFICATIONS_AS_READED, payload: user })\r\n     \r\n    }, [privateMessages, Dispatch, props.chat ])\r\n\r\n    const deleteChat = () => {  \r\n        Dispatch({type: CLOSE_CHAT, payload: { user, id } })\r\n    }\r\n\r\n    return (\r\n        <div className='private-chat-container'>\r\n\r\n                <div className='user-connected-container'>\r\n                     <h4> { user } </h4> \r\n                     <button onClick={deleteChat}> < CloseIcon style={{color: '#800000', margin: 5}} /> </button>\r\n                </div>\r\n\r\n                < PrivateMessage user={user} id={id} />\r\n\r\n                < SendPrivateMessage user={user} id={id} />\r\n                \r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { Context } from '../../context/Context'\r\nimport PrivateChat from './privatechat/PrivateChat'\r\n\r\nexport default function PrivateChats() {\r\n\r\n    const context = useContext(Context)\r\n    const { privateChats } = context.State\r\n\r\n    return (\r\n        <div className='PrivateChats-grid'> \r\n            {privateChats.map((chat, uid) => <PrivateChat key={uid} chat={chat} />) }\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport Chat from '../../components/chat/Chat'\r\nimport Login from '../login/Login'\r\nimport PrivateChats from '../../components/privatechats/PrivateChats'\r\n// CONTEXT\r\nimport { Context } from '../../context/Context'\r\n\r\nconst Layout = (props) => {\r\n\r\n  const context = useContext(Context)\r\n  const { userConnected } = context.State\r\n\r\n    return (\r\n\r\n        <div className='layout-container'>\r\n         {!userConnected ? <Login /> : \r\n         \r\n          <div className='login-chats-container'> \r\n            <div className='layout-chat-container'> < Chat history={props.history} />  </div> \r\n            <div className='layout-PrivateChats-container'>  <PrivateChats /> </div> \r\n          </div>}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Layout","import React from 'react'\r\n\r\nfunction Homepage(props) {\r\n \r\nconst redirect = () => {\r\nprops.history.push('/Community')\r\n}\r\n\r\n    return (\r\n        <div className='homepage-container'> \r\n           <div>\r\n                <h1> Dev Community  </h1>\r\n                <h4> Chatea con otros desarrolladores! </h4>\r\n                <button onClick={redirect}> Empezar </button>\r\n            </div> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Homepage","import React from 'react'\nimport { HashRouter as Router, Route, Switch} from 'react-router-dom'\n//PAGES\nimport Layout from './pages/layout/Layout'\nimport Homepage from './pages/homepage/Homepage'\n\nfunction App () {\n\n  return (\n          <Router>\n            <Switch>\n              <Route exact path='/' component={Homepage} /> \n              <Route exact path='/Community' component={Layout} /> \n            </Switch> \n          </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport './index.scss'\nimport { State } from './context/Context'\n\nReactDOM.render( <State> <App /> </State>, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}